

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, RETURN, VOID, CHARCONST, RBRACE, LBRACE, CONST;
terminal EQUAL, PLUSPLUS, MINUSMINUS, DOTCOMMA, READ, LPAREN, RPAREN, PRINT, COMMA, NUMBER;
terminal BOOLCONST, NEW, LSQUARE, RSQUARE, PLUS, MINUS, MUL, DIV, PERCENT, IDENT ;

nonterminal DesignatorStatement, Designator, Expr, NumberInPrint, Minus, Term, AddopTerm, Addop;
nonterminal  Factor, MulopFactor, Mulop, Type, ExprList, VarDecl, SquareList, FunctionType;
nonterminal IdentSquareList, FormPars, TypeIdentSquareList, DesignatorListMany, DesignatorList, Statement;
nonterminal VarDeclList, MethodDeclList, Program, MethodDecl, StatementList, FormalParamDecl, FormParsLst;

Program ::= (Program) PROG IDENT VarDeclList LBRACE MethodDeclList RBRACE;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
			|
			(NoVarDecl) /* epsilon smena */
			;

VarDecl ::= (VarDeclarationArray) Type IDENT SquareList IdentSquareList DOTCOMMA
          | (ConstVarDeclaration) CONST Type IDENT EQUAL Factor DOTCOMMA
          | (VarDeclarationEqual) Type IDENT EQUAL Factor DOTCOMMA
          ;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon smena */
				;

MethodDecl ::= (MethodDecl) FunctionType IDENT LPAREN FormParsLst RPAREN VarDeclList LBRACE StatementList RBRACE;

FunctionType ::= (FType) Type | VOID ;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon smena */
				;

FormParsLst ::= (FormParams) FormPars
		  |
		  (NoFormParam) /* epsilon */
		  ;

DesignatorStatement ::= (DesignatorStatementEqual) Designator EQUAL Expr
                       | (DesignatorStatementArray) LSQUARE DesignatorList DesignatorListMany RSQUARE EQUAL Designator
                       | (DesignatorStatementPlusPlus) Designator PLUSPLUS
                       | (DesignatorStatementMinusMinus) Designator MINUSMINUS
                       ;

DesignatorListMany ::= (DesignatorListRec) DesignatorListMany COMMA DesignatorList
                     | (NoDesignatorList) /* epsilon smena */
                     ;

DesignatorList ::= (DesignatorListDesignator) Designator
                 | (NoDesignatorListDesignator) /* epsilon smena */
                 ;

Statement ::= (StatementDesignator) DesignatorStatement DOTCOMMA
            |
              error DOTCOMMA:l
              {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
            | (StatementRead) READ LPAREN Designator RPAREN DOTCOMMA
            | (PrintStmt) PRINT LPAREN Expr NumberInPrint RPAREN DOTCOMMA
            ;

NumberInPrint ::= (NumberInPrintNumber) COMMA NUMBER
                | (NoNumberInPrintNumber) /* epsilon smena */
                ;

Expr ::= (Expression) Minus Term AddopTerm ;

AddopTerm ::= (AddOperationTerminatorRec) AddopTerm Addop Term
            | (NoAddOperationTerminator) /* epsilon smena */
            ;

Minus ::= (MinusExpression) MINUS
        | (NoMinusExpression) /* epsilon smena */
        ;

Term ::= (Terminator) Factor MulopFactor ;

MulopFactor ::= (MulopFactorRec) MulopFactor Mulop Factor
              | (NoMulopFactor) /* epsilon smena */
              ;

Factor ::= (FactorNum) NUMBER
         | (FactorChar) CHARCONST
         | (FactorExpr) LPAREN Expr RPAREN
         | (FactorBool) BOOLCONST
         | (FactorNewExpr) NEW Type LSQUARE Expr RSQUARE
         | (FactorDes) Designator
         | (FactorNewTypeExpr) NEW Type LSQUARE Expr RSQUARE LSQUARE Expr RSQUARE
         ;

Designator ::= (DesignatorExpression) IDENT ExprList ;

ExprList ::= (ExprListExpr) LSQUARE Expr RSQUARE
           | (NoExprListExpr) /* epsilon smena */
           ;

Addop ::= (AddOperationPlus) PLUS
        | (AddOperationMinus) MINUS
        ;

Mulop ::= (MulOperationMul) MUL
        | (MulOperationDiv) DIV
        | (MulOperationPercent) PERCENT
        ;

IdentSquareList ::= (IdentSquareListRec) IdentSquareList COMMA IDENT SquareList
                  | (NoIdentSquareList) /* epsilon smena */
                  ;

FormPars ::= (FormParsMatrix) Type IDENT SquareList TypeIdentSquareList DOTCOMMA ;

TypeIdentSquareList ::= (TypeIdentSquareListRec) TypeIdentSquareList COMMA Type IDENT SquareList
                  | (NoTypeIdentSquareList) /* epsilon smena */
                  ;

SquareList ::= (SquareListOutside) LSQUARE RSQUARE LSQUARE RSQUARE
             | (SquareListOutsideOne) LSQUARE RSQUARE
             | (NoSquareListOutside) /* epsilon smena */
             ;

Type ::= (TypeIdent) IDENT ;




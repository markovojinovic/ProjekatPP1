

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
      errorDetected = true;
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
        errorDetected = true;
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        errorDetected = true;
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, RETURN, RBRACE, LBRACE, CONST;
terminal EQUAL, PLUSPLUS, MINUSMINUS, DOTCOMMA, READ, LPAREN, RPAREN, PRINT, COMMA;
terminal NEW, LSQUARE, RSQUARE, PLUS, MINUS, MUL, DIV, PERCENT;
terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;

nonterminal DesignatorStatement DesignatorStatement;
nonterminal NumberInPrint NumberInPrint;
nonterminal Minus Minus;
nonterminal Addop Addop;
nonterminal FunctionParameters FunctionParameters;
nonterminal Lsqare Lsqare;
nonterminal Rsqare Rsqare;
nonterminal MulopFactor MulopFactor;
nonterminal Mulop Mulop;
nonterminal ExprList ExprList;
nonterminal VarDecl VarDecl;
nonterminal SquareList SquareList;
nonterminal IdentInLine IdentInLine;
nonterminal IdentList IdentList;
nonterminal OptionalComma OptionalComma;
nonterminal IdentSquareList IdentSquareList;
nonterminal FormPars FormPars;
nonterminal TypeIdentSquareList TypeIdentSquareList;
nonterminal DesignatorListMany DesignatorListMany;
nonterminal DesignatorList DesignatorList;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal StatementList StatementList;
nonterminal IdentInLineList IdentInLineList;
nonterminal OneVarDeclaration OneVarDeclaration;
nonterminal OneVarDeclarationList OneVarDeclarationList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, FormParsLst, IdentTypeInLine, ReturnStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, AddopTerm, Statement, Constant;

Program ::= (Program) PROG ProgName:p VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, V1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon smena */
			;

VarDecl ::= (VarDeclarationOther) Type:varType OneVarDeclarationList:O1 DOTCOMMA {: RESULT=new VarDeclarationOther(varType, O1); RESULT.setLine(varTypeleft); :}
          | (ConstVarDeclaration) CONST Type:varType IDENT:varName EQUAL Constant:f DOTCOMMA {: RESULT=new ConstVarDeclaration(varType, varName, f); RESULT.setLine(varTypeleft); :}
          |
            error DOTCOMMA:l
            {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new VarDeclDerived1(); :}
          ;

OneVarDeclaration ::= (VarDeclarationArray) IDENT:varName LSQUARE RSQUARE {: RESULT=new VarDeclarationArray(varName); RESULT.setLine(varNameleft); :}
                    | (VarDeclarationMatrix) IDENT:varName LSQUARE RSQUARE LSQUARE RSQUARE {: RESULT=new VarDeclarationMatrix(varName); RESULT.setLine(varNameleft); :}
                    | (VarDeclaration) IDENT:varName {: RESULT=new VarDeclaration(varName); RESULT.setLine(varNameleft); :}
                    |
                        error COMMA:l
                        {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :} {: RESULT=new OneVarDeclarationDerived1(); :}
                    ;

OneVarDeclarationList ::= (VarDeclarationList) OneVarDeclarationList:O1 OptionalComma:O2 OneVarDeclaration:O3 {: RESULT=new VarDeclarationList(O1, O2, O3); RESULT.setLine(O1left); :}
                        | (NoVarDeclarationList) {: RESULT=new NoVarDeclarationList(); :} /* epsilone smena */
                        ;

OptionalComma ::= (OptionalCommaClass) COMMA {: RESULT=new OptionalCommaClass(); :}
                | (NoOptionalCommaClass) {: RESULT=new NoOptionalCommaClass(); :} /* epsilon smena */
                ;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon smena */
				;

MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormParsLst:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 ReturnStatement:R5 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4, R5); RESULT.setLine(M1left); :};

ReturnStatement ::= (ReturnStatementExpr) RETURN Expr:exprName DOTCOMMA {: RESULT=new ReturnStatementExpr(exprName); RESULT.setLine(exprNameleft); :}
                  | (NoReturnStatement) {: RESULT=new NoReturnStatement(); :} /* epsilon smena */
                  ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:metName {: RESULT=new MethodTypeName(retType, metName); RESULT.setLine(retTypeleft); :};

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon smena */
				;

FormParsLst ::= (FormParams) FormParsLst:F1 Type:typeName IDENT:identName IdentList:I2 {: RESULT=new FormParams(F1, typeName, identName, I2); RESULT.setLine(F1left); :}
		  | (NoFormParams) {: RESULT=new NoFormParams(); :} /* epsilon smena */
		  ;

IdentList ::= (IdentLists) IdentList:I1 IdentTypeInLine:I2 {: RESULT=new IdentLists(I1, I2); RESULT.setLine(I1left); :}
            | (NoIdentLists) {: RESULT=new NoIdentLists(); :} /* epsilon smena */
            ;

DesignatorStatement ::= (DesignatorStatementEqual) Designator:dest EQUAL Expr:e {: RESULT=new DesignatorStatementEqual(dest, e); RESULT.setLine(destleft); :}
                       | (DesignatorStatementPlusPlus) Designator:D1 PLUSPLUS {: RESULT=new DesignatorStatementPlusPlus(D1); RESULT.setLine(D1left); :}
                       | (DesignatorStatementMinusMinus) Designator:D1 MINUSMINUS {: RESULT=new DesignatorStatementMinusMinus(D1); RESULT.setLine(D1left); :}
                       ;

DesignatorListMany ::= (DesignatorListRec) DesignatorListMany:D1 COMMA DesignatorList:D2 {: RESULT=new DesignatorListRec(D1, D2); RESULT.setLine(D1left); :}
                     | (NoDesignatorList) {: RESULT=new NoDesignatorList(); :} /* epsilon smena */
                     ;

DesignatorList ::= (DesignatorListDesignator) Designator:D1 {: RESULT=new DesignatorListDesignator(D1); RESULT.setLine(D1left); :}
                 | (NoDesignatorListDesignator) {: RESULT=new NoDesignatorListDesignator(); :} /* epsilon smena */
                 ;

Statement ::= (StatementDesignator) DesignatorStatement:D1 DOTCOMMA {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
            |
              error DOTCOMMA:l
              {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new StatementDerived1(); :}
            | (StatementRead) READ LPAREN Designator:D1 RPAREN DOTCOMMA {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
            | (PrintStmt) PRINT LPAREN Expr:E1 NumberInPrint:N2 RPAREN DOTCOMMA {: RESULT=new PrintStmt(E1, N2); RESULT.setLine(E1left); :}
            ;

NumberInPrint ::= (NumberInPrintNumber) COMMA NUMBER:N1 {: RESULT=new NumberInPrintNumber(N1); RESULT.setLine(N1left); :}
                | (NoNumberInPrintNumber) {: RESULT=new NoNumberInPrintNumber(); :} /* epsilon smena */
                ;

Expr ::= (Expression) Minus:M1 Term:t AddopTerm:a {: RESULT=new Expression(M1, t, a); RESULT.setLine(M1left); :} ;

AddopTerm ::= (AddOperationTerminatorRec) AddopTerm:te Addop:A1 Term:t {: RESULT=new AddOperationTerminatorRec(te, A1, t); RESULT.setLine(teleft); :}
            | (NoAddOperationTerminator) {: RESULT=new NoAddOperationTerminator(); :} /* epsilon smena */
            ;

Minus ::= (MinusExpression) MINUS {: RESULT=new MinusExpression(); :}
        | (NoMinusExpression) {: RESULT=new NoMinusExpression(); :} /* epsilon smena */
        ;

Term ::= (Terminator) Factor:t MulopFactor:M1 {: RESULT=new Terminator(t, M1); RESULT.setLine(tleft); :} ;

MulopFactor ::= (MulopFactorRec) MulopFactor:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorRec(M1, M2, F3); RESULT.setLine(M1left); :}
              | (NoMulopFactor) {: RESULT=new NoMulopFactor(); :} /* epsilon smena */
              ;

Factor ::= (Consts) Constant:c {: RESULT=new Consts(c); RESULT.setLine(cleft); :}
         | (FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
         | (FactorNewExpr) NEW Type:t Lsqare:L1 Expr:e Rsqare:R2 {: RESULT=new FactorNewExpr(t, L1, e, R2); RESULT.setLine(tleft); :}
         | (FactorDes) Designator:d {: RESULT=new FactorDes(d); RESULT.setLine(dleft); :}
         | (FactorNewTypeExpr) NEW Type:t Lsqare:L1 Expr:e1 Rsqare:R2 Lsqare:L3 Expr:e2 Rsqare:R4 {: RESULT=new FactorNewTypeExpr(t, L1, e1, R2, L3, e2, R4); RESULT.setLine(tleft); :}
         ;

Constant ::= (FactorNum) NUMBER:value {: RESULT=new FactorNum(value); RESULT.setLine(valueleft); :}
           | (FactorChar) CHARCONST:value {: RESULT=new FactorChar(value); RESULT.setLine(valueleft); :}
           | (FactorBool) BOOLCONST:value {: RESULT=new FactorBool(value); RESULT.setLine(valueleft); :}
           ;

Designator ::= (DesignatorExpression) IDENT:name ExprList:E1 {: RESULT=new DesignatorExpression(name, E1); RESULT.setLine(nameleft); :} ;

ExprList ::= (ExprListExpr) Lsqare:L1 Expr:E2 Rsqare:R3 {: RESULT=new ExprListExpr(L1, E2, R3); RESULT.setLine(L1left); :}
           | (ExprListExprMatrix) Lsqare:L1 Expr:E2 Rsqare:R3 Lsqare:L4 Expr:E5 Rsqare:R6 {: RESULT=new ExprListExprMatrix(L1, E2, R3, L4, E5, R6); RESULT.setLine(L1left); :}
           | (NoExprListExpr) {: RESULT=new NoExprListExpr(); :} /* epsilon smena */
           ;

Addop ::= (AddOperationPlus) PLUS {: RESULT=new AddOperationPlus(); :}
        | (AddOperationMinus) MINUS {: RESULT=new AddOperationMinus(); :}
        ;

Mulop ::= (MulOperationMul) MUL {: RESULT=new MulOperationMul(); :}
        | (MulOperationDiv) DIV {: RESULT=new MulOperationDiv(); :}
        | (MulOperationPercent) PERCENT {: RESULT=new MulOperationPercent(); :}
        ;

IdentSquareList ::= (IdentSquareListRec) IdentSquareList:I1 IdentInLine:I2 SquareList:S3 {: RESULT=new IdentSquareListRec(I1, I2, S3); RESULT.setLine(I1left); :}
                  | (NoIdentSquareList) {: RESULT=new NoIdentSquareList(); :} /* epsilon smena */
                  ;

IdentInLine ::= (IdentInLine) COMMA IDENT:identName {: RESULT=new IdentInLine(identName); RESULT.setLine(identNameleft); :};

IdentInLineList ::= (ListOfIdentInLine) IdentInLineList:I1 IdentInLine:I2 {: RESULT=new ListOfIdentInLine(I1, I2); RESULT.setLine(I1left); :}
                  | (IdentInLineList) {: RESULT=new IdentInLineList(); :} /* epsilon smena */
                  ;

IdentTypeInLine ::= (IdentTypeInLine) COMMA Type:typeName IDENT:identName {: RESULT=new IdentTypeInLine(typeName, identName); RESULT.setLine(typeNameleft); :};

FormPars ::= (FormParsMatrix) Type:T1 IDENT:I2 SquareList:S3 TypeIdentSquareList:T4 DOTCOMMA {: RESULT=new FormParsMatrix(T1, I2, S3, T4); RESULT.setLine(T1left); :};

TypeIdentSquareList ::= (TypeIdentSquareListRec) TypeIdentSquareList:T1 COMMA Type:typeName IDENT:identName SquareList:S2 {: RESULT=new TypeIdentSquareListRec(T1, typeName, identName, S2); RESULT.setLine(T1left); :}
                  | (NoTypeIdentSquareList) {: RESULT=new NoTypeIdentSquareList(); :} /* epsilon smena */
                  ;

SquareList ::= (SquareListOutside) LSQUARE RSQUARE LSQUARE RSQUARE {: RESULT=new SquareListOutside(); :}
             | (SquareListOutsideOne) LSQUARE RSQUARE {: RESULT=new SquareListOutsideOne(); :}
             | (NoSquareListOutside) {: RESULT=new NoSquareListOutside(); :} /* epsilon smena */
             ;

Type ::= (TypeIdent) IDENT:typeName {: RESULT=new TypeIdent(typeName); RESULT.setLine(typeNameleft); :} ;

Lsqare ::= (LsquareClass) LSQUARE {: RESULT=new LsquareClass(); :};

Rsqare ::= (RsquareClass) RSQUARE {: RESULT=new RsquareClass(); :};